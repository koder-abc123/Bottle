{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","target","rel","id","this","props","account","Component","Main","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","copyCodeToClipboard","textArea","select","document","execCommand","setState","copySuccess","state","_this2","scope","products","map","product","key","console","log","fleekUrl","ref","textarea","value","toString","name","window","web3","utils","fromWei","price","owner","purchased","onClick","event","style","color","App","createProduct","loading","marketplace","methods","send","from","once","receipt","productCount","bind","assertThisInitialized","purchaseProduct","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Marketplace","networks","Contract","abi","address","i","concat","toConsumableArray","components_Navbar","role","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.740a3ced.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"https://github.com/koder-abc123/Bottle\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Product Marketplace\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\"><span id=\"account\">{this.props.account}</span></small>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      copySuccess: false\n    }\n  }\n\n  copyCodeToClipboard = () => {\n    const el = this.textArea\n    el.select()\n    document.execCommand(\"copy\")\n    this.setState({copySuccess: true})\n  }\n\n  render() {\n    return (\n      <div id=\"content\">\n        <p>&nbsp;</p>\n        <h2>Buy Product</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Price</th>\n              <th scope=\"col\">Owner</th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody id=\"productList\">\n            {this.props.products.map((product, key) => {\n              console.log(product.fleekUrl);\n             \n              return (\n                <div>\n                  <div>\n                    <textarea className=\"clipboard-text\"\n                      ref={(textarea) => this.textArea = textarea}\n                      value={product.fleekUrl}\n                    />\n                  </div>\n                  <tr key={key}>\n                  <th scope=\"row\">{product.id.toString()}</th>\n                  <td>{product.name}</td>\n                  <td>{window.web3.utils.fromWei(product.price.toString(), \"ether\")} Eth</td>\n                  <td>{product.owner}</td>\n                  <td>\n                    {!product.purchased\n                      ? <button\n                        name={product.id}\n                        value={product.price}\n                        onClick={(event) => {\n                          //this.props.purchaseProduct(event.target.name, event.target.value)\n                          this.copyCodeToClipboard()\n                        }}\n                        >\n                          Buy\n                        </button>\n                      : null\n                    }\n                  </td>\n                </tr>\n                \n                </div>\n                \n              )\n            })}\n          </tbody>\n        </table>\n        {\n              this.state.copySuccess ?\n              <div style={{\"color\": \"green\"}}>\n                Copied to Clipboard!\n              </div> : null\n        }\n        <p><a href=\"https://explorer-mumbai.maticvigil.com/tx/0xec9b4b0aa6c03ce11a1f8d5a6189cd46efe87a1755a8fdc9deec2a65a5bd1b70/logs\" target=\"_blank\">Contract information</a></p>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport Marketplace from '../abis/Marketplace.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    const networkData = Marketplace.networks[networkId]\n    console.log(networkData)\n    if (networkData) {\n      const marketplace = new web3.eth.Contract(Marketplace.abi, networkData.address)\n      this.setState({ marketplace })\n      const productCount = await marketplace.methods.productCount().call()\n      // console.log(productCount.toString())\n      this.setState({ productCount })\n      //Load products\n      for (let i = 0; i <= productCount; i++) {\n        const product = await marketplace.methods.products(i).call()\n        this.setState({\n          products: [...this.state.products, product]\n        })\n      }\n      this.setState({ loading: false })\n      console.log(this.state.products)\n    } else {\n      window.alert('Marketplace contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      productCount: 0,\n      products: [],\n      loading: true\n    }\n\n    this.createProduct = this.createProduct.bind(this)\n    this.purchaseProduct = this.purchaseProduct.bind(this)\n  }\n\n  createProduct = (name, price) => {\n    this.setState({ loading: true })\n    console.log(\"USING\",this.state.account);\n    console.log(name,price);\n\n    this.state.marketplace.methods.createProduct(name, price).send({ from: this.state.account })\n      .once('receipt', (receipt) => {\n        this.setState({ loading: false })\n    })\n    \n  }\n  \n  purchaseProduct(id, price) {\n    this.setState({ loading: true })\n    this.state.marketplace.methods.purchaseProduct(id).send({ from: this.state.account, value: price })\n      .once('receipt', (receipt) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n              {this.state.loading\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\n                : <Main\n                  products = {this.state.products}\n                  createProduct = {this.createProduct}\n                  purchaseProduct = {this.purchaseProduct} />\n              }\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}